@using R1StatsModel
@using R1StatsModel.Model
@using Microsoft.EntityFrameworkCore
@using R1StatsModel.Extensions
@using R1StatsModel.Pagenation
@inject IDbContextFactory<StatsContext> DbFactory

@page "/players"
<PageTitle>Players</PageTitle>

<MudTable ServerData="(new Func<TableState,Task<TableData<Player>>>(GetData))" Dense="true" Hover="true" @ref="table">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Players</MudText>
        <MudSpacer/>
        <MudTextField T="string" ValueChanged="OnSearch" Placeholder="Player Name" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh></MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="Name" T="Player">Name</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="Rank" T="Player" InitialDirection="SortDirection.Descending">Rank</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="Kills" T="Player">Kills</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="Assists" T="Player">Assists</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="Deaths" T="Player">Deaths</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="KDA" T="Player">KDA</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="Ratio" T="Player">Ratio</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="Wins" T="Player">Wins</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="Loss" T="Player">Loss</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="WLRatio" T="Player">W/L Ratio</MudTableSortLabel>
        </MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>
            <MudTooltip Text="Player Perma-Link" Placement="Placement.Right">
                <MudIconButton Icon="@Icons.Material.Filled.Link" Color="Color.Inherit" Edge="Edge.End" Href="@(PlayerLink(context))" />
            </MudTooltip>
        </MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Rank">@context.Rank</MudTd>
        <MudTd DataLabel="Kills">@context.Kills</MudTd>
        <MudTd DataLabel="Assists">@context.Assists</MudTd>
        <MudTd DataLabel="Deaths">@context.Deaths</MudTd>
        <MudTd DataLabel="KDA">@context.KDA</MudTd>
        <MudTd DataLabel="Ratio">@context.KDARatio</MudTd>
        <MudTd DataLabel="Wins">@context.Wins</MudTd>
        <MudTd DataLabel="Loss">@context.Losses</MudTd>
        <MudTd DataLabel="WLRatio">@context.WinLossRatio</MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No matching players found.</MudText>
    </NoRecordsContent>
    <LoadingContent>
        Loading Players...
    </LoadingContent>
    <PagerContent>
        <MudTablePager PageSizeOptions="new []{10,15,20}"/>
    </PagerContent>
</MudTable>

@code
{
    private IEnumerable<Player> pagedData;
    private MudTable<Player> table;

    private int totalItems;
    private string searchString = null;

    protected override async Task OnInitializedAsync()
    {
        await using var c = await DbFactory.CreateDbContextAsync();
    }

    private async Task<TableData<Player>> GetData(TableState state)
    {
        await using var c = await DbFactory.CreateDbContextAsync();
        totalItems = c.Players.Count(x => x.Wins + x.Losses > 10);
        if (string.IsNullOrEmpty(searchString))
        {
            switch (state.SortLabel)
            {
                case "Name":
                    pagedData = c.Players.OrderByDirection(state.SortDirection, x => x.Name).Where(x => x.Wins + x.Losses > 10).Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
                    break;
                case "Rank":
                    pagedData = c.Players.OrderByDirection(state.SortDirection, x => x.Rank).Where(x => x.Wins + x.Losses > 10).Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
                    break;
                case "Kills":
                    pagedData = c.Players.OrderByDirection(state.SortDirection, x => x.Kills).Where(x => x.Wins + x.Losses > 10).Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
                    break;
                case "Assists":
                    pagedData = c.Players.OrderByDirection(state.SortDirection, x => x.Assists).Where(x => x.Wins + x.Losses > 10).Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
                    break;
                case "Deaths":
                    pagedData = c.Players.OrderByDirection(state.SortDirection, x => x.Deaths).Where(x => x.Wins + x.Losses > 10).Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
                    break;
                case "KDA":
                    pagedData = c.Players.OrderByDirection(state.SortDirection, x => x.KDA).Where(x => x.Wins + x.Losses > 10).Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
                    break;
                case "Ratio":
                    pagedData = c.Players.OrderByDirection(state.SortDirection, x => x.KDARatio).Where(x => x.Wins + x.Losses > 10).Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
                    break;
                case "Wins":
                    pagedData = c.Players.OrderByDirection(state.SortDirection, x => x.Wins).Where(x => x.Wins + x.Losses > 10).Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
                    break;
                case "Loss":
                    pagedData = c.Players.OrderByDirection(state.SortDirection, x => x.Losses).Where(x => x.Wins + x.Losses > 10).Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
                    break;
                case "WLRatio":
                    pagedData = c.Players.OrderByDirection(state.SortDirection, x => x.WinLossRatio).Where(x => x.Wins + x.Losses > 10).Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
                    break;
            }
        }
        else
        {
            pagedData = c.Players.OrderByDirection(state.SortDirection, x => x.Name).Where(x => x.Name.Contains(searchString)).Where(x => x.Wins + x.Losses > 10).Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        }
        return new TableData<Player>() {TotalItems = totalItems, Items = pagedData};
    }

    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }

    private string PlayerLink(Player player) => 
        $"/Player/{player.Id}";
}
